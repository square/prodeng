#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
require 'mcmd'

require 'optparse'
require 'ostruct'
options = {
  :maxflight => 50,
  :timeout => 60,
  :global_timeout => 600,
}
optparse = OptionParser.new do |opts|
  opts.on('-r', '--range RANGE', 'Requires a configured Range::Client. Use --hostlist if you do not use range') do |arg|
    options[:range] = arg 
  end
  opts.on('--hostlist x,y,z', Array, 'List of hostnames to execute on') do |arg|
    options[:hostlist] = arg 
  end
  opts.on('-f', '--file FILE', 'List of hostnames in a FILE use (/dev/stdin) for reading from stdin') do |arg|
    options[:file] = arg 
  end
  opts.on('-m', '--maxflight 50', 'How many subprocesses? 50 by default') do |arg|
    options[:maxflight] = arg 
  end
  opts.on('-t', '--timeout 60', 'How many seconds may each individual process take? 0 for no timeout') do |arg|
    options[:timeout] = arg 
  end
  opts.on('-g', '--global_timeout 600', 'How many seconds for the whole shebang 0 for no timeout') do |arg|
    options[:global_timeout] = arg 
  end
  opts.on('-c', '--collapse', "Collapse similar output ") do |arg|
    options[:collapse] = arg 
  end
  opts.on('-v', '--verbose', "verbose ") do |arg|
    options[:verbose] = arg 
  end
  opts.on('-d', '--debug', "Debug output") do |arg|
    options[:debug] = arg 
  end
  # option to merge stdin/stdout into one buf?
  # option to ignore as-we-go yield output
end
optparse.parse!

targets = []
if (options[:range].nil? and options[:file].nil? and options[:hostlist].nil?)
  raise "Error, need -r or -f or --hostlist option"
end

if (!options[:range].nil?)
  require 'rangeclient'
  range = Range::Client.new
  targets.push *range.expand(options[:range])
end
if (!options[:file].nil?)
  targets_fd = File.open(options[:file])
  targets_fd.read.each { |x| targets << x.chomp }
end
if (!options[:hostlist].nil?)
  targets.push *options[:hostlist]
end

raise "no targets specified. Check your -r, -f or --hostlist inputs" if targets.size.zero?
raise "need command to run" if ARGV.size.zero?
raise "too many arguments" if ARGV.size != 1



m = MultipleCmd.new
m.commands = targets.map { |t| ["/usr/bin/ssh","-2", "-oStrictHostKeyChecking=no", "-oBatchMode=yes", "-A", t].push ARGV.first }
command_to_target = Hash.new
targets.size.times do |i|
  command_to_target[m.commands[i].object_id] = targets[i]
end
m.yield_startcmd = lambda { |p| puts "#{command_to_target[p.command.object_id]}: starting" } if options[:verbose]
m.yield_wait = lambda { |p| puts "#{command_to_target[p.command.object_id]}: finished" } if options[:verbose]

m.perchild_timeout = options[:timeout].to_i
m.global_timeout = options[:global_timeout].to_i
m.maxflight = options[:maxflight].to_i
m.verbose = options[:verbose]
m.debug = options[:debug]

result = m.run

if (options[:collapse] and options[:range])
  # print a collapsed summary
  out_matches = Hash.new
  result.each do |r|
    out = "" 
    out += r[:stdout_buf].chomp if(!r[:stdout_buf].nil?)
    out += r[:stderr_buf].chomp if(!r[:stderr_buf].nil?)
    out_matches[out] = [] if out_matches[out].nil?
    out_matches[out] << command_to_target[r[:command].object_id]
  end
  # output => [targets ...]
  out_matches.each_pair do |k,v|
    hosts = range.compress v
    puts "#{hosts}: '#{k.chomp}'"
  end
else
  # not collapse, print one per host
  result.each do |r|
    target = command_to_target[r[:command].object_id]
    out = "" 
    out += r[:stdout_buf].chomp if(!r[:stdout_buf].nil?)
    out += r[:stderr_buf].chomp if(!r[:stderr_buf].nil?)
    if (r[:retval] == 0 )
        puts "#{target}:SUCCESS: #{out}\n"
    else
        exit_code = r[:retval].exitstatus.to_s if(!r[:retval].nil?)
        puts "#{target}:FAILURE[#{exit_code}]: #{out}\n"
    end
  end
end
